
AWSTemplateFormatVersion: 2010-09-09
Description: Creates a VPC and a ELB with a EC2 Target Group Associated

Parameters:

    SSHKeyName:
        Description: 'Name of the ec2 key you need one to use this template'
        Type: 'AWS::EC2::KeyPair::KeyName'
        Default: 'choose-key'

    us-east-1-AMI:
      Type: String 
  
    us-east-2-AMI:
      Type: String 

    us-west-1-AMI:
      Type: String 

    us-west-2-AMI:
      Type: String 

    InstanceType:
      Type: String
      default: t2.nano

    NetworkToSubnet:
      Type: String
    
    PubSubnetZoneA:
      Type: String

    PrivSubnetZoneA:
      Type: String

    PubSubnetZoneB:
      Type: String

    PrivSubnetZoneB:
      Type: String

    VPC:
      Type: String

    MaxSizeASGs:
      Type: String

    MinSizeASG:
      Type: String
    


Mappings:

    RegionToAmazonAMI:
        us-east-1:
            HVM64: 
              Ref: us-east-1-AMI
        us-east-2:
            HVM64: 
              Ref: us-east-1-AMI
        us-west-1:
            HVM64: 
              Ref: us-west-1-AMI
        us-west-2:
            HVM64: 
              Ref: us-west-2-AMI


Resources:

    #Internet accessable subnet in the first availability zone
    PubSubnetZoneA:
        Type: 'AWS::EC2::Subnet'
        Properties:
            AvailabilityZone:
                Fn::Select:
                - '0'
                - Fn::GetAZs:
                    Ref: 'AWS::Region'
            CidrBlock:
              Ref: PubSubnetZoneA
            MapPublicIpOnLaunch: 'True'
            VpcId:
                Ref: 'VPC'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]
    PrivSubnetZoneA:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '0'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
            Ref: PrivSubnetZoneA
          MapPublicIpOnLaunch: 'False'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]

    # Internet accessable subnet in the second availability zone
    PubSubnetZoneB:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '1'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
            Ref: PubSubnetZoneB
          MapPublicIpOnLaunch: 'True'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]

    # Non-internet accessable subnet in the second availability zone
    PrivSubnetZoneB:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '1'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
            Ref: PrivSubnetZoneB
          MapPublicIpOnLaunch: 'False'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]


    # EC2 Security Group Allowing Port 22 and 80 from anywhere
    EC2SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: 'SSH and Port 80'
          VpcId:
            Ref: VPC
          SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                SourceSecurityGroupId:
                    Ref: ELBSecurityGroup

    # ELB Security Group allowing Port 80 from anywhere
    ELBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: 'SSH and Port 80'
          VpcId:
            Ref: VPC
          SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0

    # Linux Instance with Apache running on Port 80
    EC2Instance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId:
          Fn::FindInMap:
            - RegionToAmazonAMI
            - Ref: 'AWS::Region'
            - HVM64
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: 
          Ref: InstanceType 
        KeyName:
          Ref: SSHKeyName
        Monitoring: 'true'
        NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
          - !Ref EC2SecurityGroup
          SubnetId:
            Ref: PubSubnetZoneA
        Tenancy: default
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            cd /tmp
            apt-get update -y
            apt-get install -y apache2
            echo "Cisco SPL" > /var/www/html/index.html
            service apache2 start

    # Target Group
    EC2TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        Matcher:
          HttpCode: '200'
        Name: EC2TargetGroup
        Port: 80
        Protocol: HTTP
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        Targets:
        - Id:
            Ref: EC2Instance
          Port: 80
        UnhealthyThresholdCount: 3
        VpcId:
          Ref: 'VPC'
        Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80

    #ELB (ALB)
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: EC2TargetGroup
        LoadBalancerArn:
            Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP

    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing # or internal
        Subnets:
        - Ref: PubSubnetZoneA
        - Ref: PubSubnetZoneB
        SecurityGroups:
        - Ref: ELBSecurityGroup

    AutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: Cfn Autoscaling Group
        VPCZoneIdentifier:
        -  Ref: PubSubnetZoneA
        -  Ref: PubSubnetZoneB
        Cooldown: 120
        DesiredCapacity:
          Ref: DesiredCapacityASG
        LaunchConfigurationName: 
          Ref: LaunchConfig 
        MaxSize:
          Ref: MaxSizeASGs
        MinSize:
          Ref: MinSizeASG
        TargetGroupARNs:
          Ref: EC2TargetGroup

    LaunchConfig: 
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties: 
        KeyName: 
          Ref: KeyName
        ImageId: !FindInMap [ RegionToAmazonAMI, !Ref "AWS::Region", HVM64 ]
        SecurityGroups: 
          Ref: "EC2SecurityGroup"
        InstanceType: 
          Ref: "InstanceType"
        LaunchConfigurationName: CfnLaunchConfiguration  


Outputs:

    EC2Instance:
        Description: 'EC2 Instance'
        Value:
          Ref: "EC2Instance"

    EC2TargetGroup:
        Description: 'EC2 Target Group'
        Value:
          Ref: "EC2TargetGroup"

    ApplicationLoadBalancer:
        Description: 'Application Load Balancer'
        Value:
          Ref: "ApplicationLoadBalancer"

    AutoscalingGroup: 
      Description: "The newly created asg"
      Value: 
        Ref: "AutoScalingGroup"

    LaunchConfig:
      Description: "the newly created launch config"
      Value:
        Ref: "LaunchConfig"
